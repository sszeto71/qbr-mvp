import json
import os
from datetime import datetime
from io import BytesIO
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
from reportlab.platypus.frames import Frame
from reportlab.platypus.doctemplate import PageTemplate, BaseDocTemplate
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
import logging

logger = logging.getLogger(__name__)

# Blueshift Brand Colors
BLUESHIFT_BLUE = colors.Color(0, 0.4, 0.8)  # #0066CC
BLUESHIFT_LIGHT_BLUE = colors.Color(0.9, 0.95, 1)  # #E6F3FF
DARK_GRAY = colors.Color(0.2, 0.2, 0.2)  # #333333
LIGHT_GRAY = colors.Color(0.6, 0.6, 0.6)  # #999999

class BlueshiftPDFGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._create_custom_styles()
        
    def _create_custom_styles(self):
        """Create custom styles for Blueshift branding"""
        # Title style for slide headers
        self.styles.add(ParagraphStyle(
            name='BlueshiftTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=20,
            textColor=BLUESHIFT_BLUE,
            fontName='Helvetica-Bold',
            alignment=TA_LEFT
        ))
        
        # Slide title style
        self.styles.add(ParagraphStyle(
            name='SlideTitle',
            parent=self.styles['Heading2'],
            fontSize=18,
            spaceAfter=15,
            spaceBefore=10,
            textColor=BLUESHIFT_BLUE,
            fontName='Helvetica-Bold',
            alignment=TA_LEFT
        ))
        
        # Bullet point style
        self.styles.add(ParagraphStyle(
            name='BulletPoint',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=8,
            spaceBefore=4,
            leftIndent=20,
            bulletIndent=10,
            fontName='Helvetica',
            textColor=DARK_GRAY,
            alignment=TA_LEFT
        ))
        
        # Header style
        self.styles.add(ParagraphStyle(
            name='Header',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=BLUESHIFT_BLUE,
            fontName='Helvetica-Bold',
            alignment=TA_CENTER
        ))
        
        # Footer style
        self.styles.add(ParagraphStyle(
            name='Footer',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=LIGHT_GRAY,
            fontName='Helvetica',
            alignment=TA_CENTER
        ))

class BlueshiftPageTemplate(PageTemplate):
    def __init__(self, doc, client_name="", **kwargs):
        self.client_name = client_name
        self.doc = doc
        frame = Frame(0.75*inch, 0.75*inch, 
                     doc.width, doc.height - 1.5*inch,
                     id='main', leftPadding=0, rightPadding=0,
                     topPadding=0, bottomPadding=0)
        super().__init__('main', [frame], **kwargs)
        
    def beforeDrawPage(self, canvas, doc):
        """Draw header and footer on each page"""
        canvas.saveState()
        
        # Header
        canvas.setFillColor(BLUESHIFT_BLUE)
        canvas.rect(0, doc.height + 0.75*inch, doc.width + 1.5*inch, 0.75*inch, fill=1)
        
        # Header text
        canvas.setFillColor(colors.white)
        canvas.setFont('Helvetica-Bold', 16)
        canvas.drawString(0.75*inch, doc.height + inch, "Quarterly Business Review")
        
        # Client name in header
        if self.client_name:
            canvas.setFont('Helvetica', 12)
            canvas.drawRightString(doc.width + 0.75*inch, doc.height + inch, 
                                 f"Client: {self.client_name}")
        
        # Date in header
        canvas.setFont('Helvetica', 10)
        canvas.drawRightString(doc.width + 0.75*inch, doc.height + 0.85*inch, 
                             datetime.now().strftime("%B %d, %Y"))
        
        # Footer
        canvas.setFillColor(LIGHT_GRAY)
        canvas.setFont('Helvetica', 9)
        canvas.drawCentredString(doc.width/2 + 0.75*inch, 0.5*inch,
                               f"Generated by Blueshift | Page {doc.page}")
        
        # Footer line
        canvas.setStrokeColor(BLUESHIFT_BLUE)
        canvas.setLineWidth(2)
        canvas.line(0.75*inch, 0.7*inch, doc.width + 0.75*inch, 0.7*inch)
        
        canvas.restoreState()

class BlueshiftDocTemplate(BaseDocTemplate):
    def __init__(self, filename, client_name="", **kwargs):
        super().__init__(filename, **kwargs)
        template = BlueshiftPageTemplate(self, client_name)
        self.addPageTemplates([template])

def generate_qbr_pdf(qbr_data, client_name="", client_website="", industry=""):
    """
    Generate a branded PDF from QBR data
    
    Args:
        qbr_data: Dictionary containing slide data
        client_name: Name of the client
        client_website: Client's website
        industry: Client's industry
    
    Returns:
        BytesIO object containing the PDF
    """
    try:
        logger.info(f"Generating PDF for client: {client_name}")
        
        # Parse QBR data if it's a string
        if isinstance(qbr_data, str):
            qbr_content = json.loads(qbr_data)
        else:
            qbr_content = qbr_data
            
        # Create PDF in memory
        buffer = BytesIO()
        
        # Create document with custom template
        doc = BlueshiftDocTemplate(buffer, client_name=client_name, pagesize=letter)
        
        # Create PDF generator instance for styles
        pdf_gen = BlueshiftPDFGenerator()
        
        # Build content
        story = []
        
        # Title page content
        story.append(Paragraph(f"Quarterly Business Review", pdf_gen.styles['BlueshiftTitle']))
        story.append(Spacer(1, 0.3*inch))
        
        # Client information
        if client_name:
            story.append(Paragraph(f"<b>Client:</b> {client_name}", pdf_gen.styles['Normal']))
        if client_website:
            story.append(Paragraph(f"<b>Website:</b> {client_website}", pdf_gen.styles['Normal']))
        if industry:
            story.append(Paragraph(f"<b>Industry:</b> {industry}", pdf_gen.styles['Normal']))
        
        story.append(Spacer(1, 0.5*inch))
        
        # Process each slide
        slide_count = 0
        for slide_key in sorted(qbr_content.keys()):
            if slide_key.startswith('slide'):
                slide_count += 1
                slide_data = qbr_content[slide_key]
                
                # Add page break for slides after the first
                if slide_count > 1:
                    story.append(PageBreak())
                
                # Slide title
                title = slide_data.get('title', f'Slide {slide_count}')
                story.append(Paragraph(title, pdf_gen.styles['SlideTitle']))
                story.append(Spacer(1, 0.2*inch))
                
                # Slide content
                content = slide_data.get('content', [])
                if isinstance(content, list):
                    for item in content:
                        if item.strip():  # Only add non-empty items
                            # Create bullet point
                            bullet_text = f"â€¢ {item}"
                            story.append(Paragraph(bullet_text, pdf_gen.styles['BulletPoint']))
                elif isinstance(content, str):
                    story.append(Paragraph(content, pdf_gen.styles['Normal']))
                
                story.append(Spacer(1, 0.3*inch))
        
        # Add summary footer if no slides were found
        if slide_count == 0:
            story.append(Paragraph("No slide content available", pdf_gen.styles['Normal']))
        
        # Build the PDF
        doc.build(story)
        
        # Get the PDF bytes
        pdf_bytes = buffer.getvalue()
        buffer.close()
        
        logger.info(f"Successfully generated PDF with {slide_count} slides")
        return pdf_bytes
        
    except Exception as e:
        logger.error(f"Error generating PDF: {str(e)}")
        raise Exception(f"PDF generation failed: {str(e)}")

def create_pdf_response(pdf_bytes, filename="QBR_Presentation.pdf"):
    """
    Create a FastAPI response for PDF download
    
    Args:
        pdf_bytes: PDF content as bytes
        filename: Name for the downloaded file
    
    Returns:
        FastAPI Response object
    """
    from fastapi import Response
    
    return Response(
        content=pdf_bytes,
        media_type="application/pdf",
        headers={
            "Content-Disposition": f"attachment; filename={filename}",
            "Content-Type": "application/pdf"
        }
    )