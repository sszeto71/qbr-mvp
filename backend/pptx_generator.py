import json
import os
from datetime import datetime
from io import BytesIO
import logging

# Handle compatibility issues with python-pptx and Python 3.12
try:
    # Patch collections issue before importing pptx
    import collections
    import collections.abc
    if not hasattr(collections, 'Container'):
        collections.Container = collections.abc.Container
    if not hasattr(collections, 'Mapping'):
        collections.Mapping = collections.abc.Mapping
    if not hasattr(collections, 'MutableMapping'):
        collections.MutableMapping = collections.abc.MutableMapping
    if not hasattr(collections, 'Sequence'):
        collections.Sequence = collections.abc.Sequence
    if not hasattr(collections, 'Iterable'):
        collections.Iterable = collections.abc.Iterable
    
    from pptx import Presentation
    from pptx.util import Inches, Pt
    from pptx.dml.color import RGBColor
    from pptx.enum.text import PP_ALIGN, MSO_ANCHOR
    from pptx.enum.shapes import MSO_SHAPE
    PPTX_AVAILABLE = True
except ImportError as e:
    logger.error(f"PowerPoint library not available: {e}")
    PPTX_AVAILABLE = False

logger = logging.getLogger(__name__)

# Blueshift Brand Colors (matching PDF generator)
BLUESHIFT_BLUE = RGBColor(0, 102, 204)      # #0066CC
BLUESHIFT_LIGHT_BLUE = RGBColor(230, 243, 255)  # #E6F3FF
BLUESHIFT_ACCENT = RGBColor(26, 153, 230)   # #1A99E6
SUCCESS_GREEN = RGBColor(51, 179, 77)       # #33B34D
WARNING_ORANGE = RGBColor(255, 153, 51)     # #FF9933
DARK_GRAY = RGBColor(51, 51, 51)           # #333333
MEDIUM_GRAY = RGBColor(102, 102, 102)      # #666666
LIGHT_GRAY = RGBColor(153, 153, 153)       # #999999
VERY_LIGHT_GRAY = RGBColor(242, 242, 242)  # #F2F2F2

class BlueshiftPPTXGenerator:
    def __init__(self):
        if not PPTX_AVAILABLE:
            raise ImportError("PowerPoint library not available")
        self.presentation = None
        self.slide_layouts = {}
        
    def _setup_presentation(self):
        """Initialize presentation with custom layouts"""
        self.presentation = Presentation()
        
        # Remove default slide layouts and create custom ones
        self._create_custom_layouts()
        
    def _create_custom_layouts(self):
        """Create custom slide layouts with Blueshift branding"""
        # We'll use the existing layouts but customize them
        self.slide_layouts = {
            'title': 0,      # Title slide
            'content': 1,    # Content with bullets
            'blank': 6       # Blank for custom layouts
        }
        
    def _add_header_footer(self, slide, slide_number, total_slides, client_name=""):
        """Add branded header and footer to slide"""
        # Add header rectangle
        header_shape = slide.shapes.add_shape(
            MSO_SHAPE.RECTANGLE,
            Inches(0), Inches(0),
            Inches(10), Inches(0.8)
        )
        header_shape.fill.solid()
        header_shape.fill.fore_color.rgb = BLUESHIFT_BLUE
        header_shape.line.fill.background()
        
        # Add header text
        header_text = header_shape.text_frame
        header_text.clear()
        p = header_text.paragraphs[0]
        p.text = "Quarterly Business Review"
        p.font.name = 'Calibri'
        p.font.size = Pt(18)
        p.font.bold = True
        p.font.color.rgb = RGBColor(255, 255, 255)
        p.alignment = PP_ALIGN.LEFT
        
        # Add client name to header if provided
        if client_name:
            client_text = header_text.add_paragraph()
            client_text.text = f"Client: {client_name}"
            client_text.font.name = 'Calibri'
            client_text.font.size = Pt(12)
            client_text.font.color.rgb = RGBColor(255, 255, 255)
            client_text.alignment = PP_ALIGN.RIGHT
        
        # Add footer
        footer_text = slide.shapes.add_textbox(
            Inches(0.5), Inches(7),
            Inches(9), Inches(0.5)
        ).text_frame
        
        footer_p = footer_text.paragraphs[0]
        footer_p.text = f"Generated by Blueshift | {datetime.now().strftime('%B %d, %Y')} | Page {slide_number} of {total_slides}"
        footer_p.font.name = 'Calibri'
        footer_p.font.size = Pt(10)
        footer_p.font.color.rgb = LIGHT_GRAY
        footer_p.alignment = PP_ALIGN.CENTER
        
    def _add_title_slide(self, client_name="", client_website="", industry=""):
        """Create title slide with client information"""
        slide_layout = self.presentation.slide_layouts[self.slide_layouts['title']]
        slide = self.presentation.slides.add_slide(slide_layout)
        
        # Clear default placeholders
        for shape in slide.shapes:
            if hasattr(shape, "text_frame"):
                shape.text_frame.clear()
        
        # Add custom header
        self._add_header_footer(slide, 1, 6, client_name)
        
        # Main title
        title_shape = slide.shapes.add_textbox(
            Inches(1), Inches(2),
            Inches(8), Inches(1.5)
        )
        title_frame = title_shape.text_frame
        title_p = title_frame.paragraphs[0]
        title_p.text = "Quarterly Business Review"
        title_p.font.name = 'Calibri'
        title_p.font.size = Pt(36)
        title_p.font.bold = True
        title_p.font.color.rgb = BLUESHIFT_BLUE
        title_p.alignment = PP_ALIGN.CENTER
        
        # Client information
        info_y = 4
        if client_name:
            self._add_info_line(slide, "Client:", client_name, info_y)
            info_y += 0.6
        if client_website:
            self._add_info_line(slide, "Website:", client_website, info_y)
            info_y += 0.6
        if industry:
            self._add_info_line(slide, "Industry:", industry, info_y)
            
    def _add_info_line(self, slide, label, value, y_position):
        """Add an information line to the slide"""
        info_shape = slide.shapes.add_textbox(
            Inches(2), Inches(y_position),
            Inches(6), Inches(0.5)
        )
        info_frame = info_shape.text_frame
        info_p = info_frame.paragraphs[0]
        info_p.text = f"{label} {value}"
        info_p.font.name = 'Calibri'
        info_p.font.size = Pt(16)
        info_p.font.color.rgb = DARK_GRAY
        info_p.alignment = PP_ALIGN.CENTER
        
    def _add_content_slide(self, title, content, slide_number, total_slides, client_name=""):
        """Add a content slide with title and bullet points"""
        slide_layout = self.presentation.slide_layouts[self.slide_layouts['content']]
        slide = self.presentation.slides.add_slide(slide_layout)
        
        # Clear default placeholders
        for shape in slide.shapes:
            if hasattr(shape, "text_frame"):
                shape.text_frame.clear()
        
        # Add header and footer
        self._add_header_footer(slide, slide_number, total_slides, client_name)
        
        # Slide title
        title_shape = slide.shapes.add_textbox(
            Inches(0.5), Inches(1.2),
            Inches(9), Inches(0.8)
        )
        title_frame = title_shape.text_frame
        title_p = title_frame.paragraphs[0]
        title_p.text = title
        title_p.font.name = 'Calibri'
        title_p.font.size = Pt(28)
        title_p.font.bold = True
        title_p.font.color.rgb = BLUESHIFT_BLUE
        title_p.alignment = PP_ALIGN.LEFT
        
        # Content area
        content_shape = slide.shapes.add_textbox(
            Inches(0.8), Inches(2.2),
            Inches(8.5), Inches(4.5)
        )
        content_frame = content_shape.text_frame
        content_frame.word_wrap = True
        
        # Add content items as bullet points
        if isinstance(content, list):
            for i, item in enumerate(content):
                if item.strip():  # Only add non-empty items
                    if i == 0:
                        p = content_frame.paragraphs[0]
                    else:
                        p = content_frame.add_paragraph()
                    
                    p.text = item
                    p.font.name = 'Calibri'
                    p.font.size = Pt(16)
                    p.font.color.rgb = DARK_GRAY
                    p.level = 0
                    
                    # Add bullet point styling
                    p.alignment = PP_ALIGN.LEFT
                    
        elif isinstance(content, str) and content.strip():
            p = content_frame.paragraphs[0]
            p.text = content
            p.font.name = 'Calibri'
            p.font.size = Pt(16)
            p.font.color.rgb = DARK_GRAY
            
    def _create_metrics_slide(self, slide_data, slide_number, total_slides, client_name=""):
        """Create a slide with metrics/KPI information"""
        slide_layout = self.presentation.slide_layouts[self.slide_layouts['blank']]
        slide = self.presentation.slides.add_slide(slide_layout)
        
        # Add header and footer
        self._add_header_footer(slide, slide_number, total_slides, client_name)
        
        # Slide title
        title_shape = slide.shapes.add_textbox(
            Inches(0.5), Inches(1.2),
            Inches(9), Inches(0.8)
        )
        title_frame = title_shape.text_frame
        title_p = title_frame.paragraphs[0]
        title_p.text = slide_data.get('title', 'Key Metrics')
        title_p.font.name = 'Calibri'
        title_p.font.size = Pt(28)
        title_p.font.bold = True
        title_p.font.color.rgb = BLUESHIFT_BLUE
        
        # Add metrics as formatted text blocks
        content = slide_data.get('content', [])
        if isinstance(content, list):
            y_pos = 2.5
            for item in content:
                if item.strip():
                    metric_shape = slide.shapes.add_textbox(
                        Inches(1), Inches(y_pos),
                        Inches(8), Inches(0.6)
                    )
                    metric_frame = metric_shape.text_frame
                    metric_p = metric_frame.paragraphs[0]
                    metric_p.text = f"• {item}"
                    metric_p.font.name = 'Calibri'
                    metric_p.font.size = Pt(16)
                    metric_p.font.color.rgb = DARK_GRAY
                    
                    # Color coding for metrics with numbers
                    if any(char.isdigit() for char in item):
                        if '+' in item or 'increase' in item.lower() or 'growth' in item.lower():
                            metric_p.font.color.rgb = SUCCESS_GREEN
                        elif '-' in item or 'decrease' in item.lower() or 'drop' in item.lower():
                            metric_p.font.color.rgb = WARNING_ORANGE
                    
                    y_pos += 0.7
    
    def generate_qbr_pptx(self, qbr_data, client_name="", client_website="", industry=""):
        """
        Generate a branded PowerPoint presentation from QBR data
        
        Args:
            qbr_data: Dictionary or JSON string containing slide data
            client_name: Name of the client
            client_website: Client's website
            industry: Client's industry
        
        Returns:
            BytesIO object containing the PowerPoint file
        """
        try:
            logger.info(f"Generating PowerPoint for client: {client_name}")
            
            # Parse QBR data if it's a string
            if isinstance(qbr_data, str):
                qbr_content = json.loads(qbr_data)
            else:
                qbr_content = qbr_data
                
            # Initialize presentation
            self._setup_presentation()
            
            # Add title slide
            self._add_title_slide(client_name, client_website, industry)
            
            # Process content slides
            slide_count = 0
            total_slides = len([k for k in qbr_content.keys() if k.startswith('slide')]) + 1  # +1 for title slide
            
            for slide_key in sorted(qbr_content.keys()):
                if slide_key.startswith('slide'):
                    slide_count += 1
                    slide_data = qbr_content[slide_key]
                    slide_number = slide_count + 1  # +1 because title slide is slide 1
                    
                    title = slide_data.get('title', f'Slide {slide_count}')
                    content = slide_data.get('content', [])
                    
                    # Special handling for metrics slides (slide2 typically contains metrics)
                    if slide_key == 'slide2' or 'metric' in title.lower() or 'kpi' in title.lower():
                        self._create_metrics_slide(slide_data, slide_number, total_slides, client_name)
                    else:
                        self._add_content_slide(title, content, slide_number, total_slides, client_name)
            
            # Save to BytesIO
            buffer = BytesIO()
            self.presentation.save(buffer)
            
            # Get the PowerPoint bytes
            pptx_bytes = buffer.getvalue()
            buffer.close()
            
            logger.info(f"Successfully generated PowerPoint with {slide_count + 1} slides")
            return pptx_bytes
            
        except Exception as e:
            logger.error(f"Error generating PowerPoint: {str(e)}")
            raise Exception(f"PowerPoint generation failed: {str(e)}")

def create_pptx_response(pptx_bytes, filename="QBR_Presentation.pptx"):
    """
    Create a FastAPI response for PowerPoint download
    
    Args:
        pptx_bytes: PowerPoint content as bytes
        filename: Name for the downloaded file
    
    Returns:
        FastAPI Response object
    """
    from fastapi import Response
    
    return Response(
        content=pptx_bytes,
        media_type="application/vnd.openxmlformats-officedocument.presentationml.presentation",
        headers={
            "Content-Disposition": f"attachment; filename={filename}",
            "Content-Type": "application/vnd.openxmlformats-officedocument.presentationml.presentation"
        }
    )

# Convenience function that mirrors the PDF generator
def generate_qbr_pptx(qbr_data, client_name="", client_website="", industry=""):
    """
    Generate a branded PowerPoint from QBR data
    
    Args:
        qbr_data: Dictionary containing slide data
        client_name: Name of the client
        client_website: Client's website  
        industry: Client's industry
    
    Returns:
        BytesIO object containing the PowerPoint
    """
    generator = BlueshiftPPTXGenerator()
    return generator.generate_qbr_pptx(qbr_data, client_name, client_website, industry)